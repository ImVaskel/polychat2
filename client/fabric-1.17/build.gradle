buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.0"
    }
}

plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
}
apply plugin: "com.github.johnrengelman.shadow"

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation(files("../../core/message-library/build/libs/message-library-${version}.jar"))
    modImplementation(files("../../core/network-library/build/libs/network-library-${version}.jar"))
    modImplementation(files("../../core/common/build/libs/common-${version}.jar"))
    modImplementation(files("../client-base/build/libs/client-base-${version}.jar"))
    modImplementation("com.google.protobuf:protobuf-java:3.13.0")
    modImplementation("org.yaml:snakeyaml:1.+")

    // shadow the above.
    shadow(files("../../core/message-library/build/libs/message-library-${version}.jar"))
    shadow(files("../../core/network-library/build/libs/network-library-${version}.jar"))
    shadow(files("../../core/common/build/libs/common-${version}.jar"))
    shadow(files("../client-base/build/libs/client-base-${version}.jar"))
    shadow("com.google.protobuf:protobuf-java:3.13.0")
    shadow("org.yaml:snakeyaml:1.+")

}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
}

def targetJavaVersion = 16
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    from configurations.shadow.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        attributes([
                "Specification-Title"     : "polychat",
                "Specification-Vendor"    : "moddedminecraftclub",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "moddedminecraftclub",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

remapJar {
    dependsOn shadowJar
    input.set shadowJar.archiveFile.get()
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {

    }
}